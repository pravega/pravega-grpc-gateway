/*
 * Copyright Pravega Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.pravega.example.gateway.grpc";

service PravegaGateway {
  rpc CreateScope(CreateScopeRequest) returns (CreateScopeResponse) {}
  rpc CreateStream(CreateStreamRequest) returns (CreateStreamResponse) {}
  rpc UpdateStream(UpdateStreamRequest) returns (UpdateStreamResponse) {}
  rpc TruncateStream(TruncateStreamRequest) returns (TruncateStreamResponse) {}
  rpc DeleteStream(DeleteStreamRequest) returns (DeleteStreamResponse) {}
  rpc ListStreams(ListStreamsRequest) returns (stream ListStreamsResponse) {}

  /*
  Read events from a stream. This will create a new reader group with exactly one reader.
  From and to stream cuts can be provided for a bounded read.
  Multiple events are returned as a GRPC stream.
  */
  rpc ReadEvents(ReadEventsRequest) returns (stream ReadEventsResponse) {}

  /*
  Fetch a single event using an event pointer.
  */
  rpc FetchEvent(FetchEventRequest) returns (FetchEventResponse) {}

  /*
  Write events to a stream. This supports transactional and non-transactional writes.
  Multiple events can be written as a GRPC stream.
  */
  rpc WriteEvents(stream WriteEventsRequest) returns (WriteEventsResponse) {}

  rpc GetStreamInfo(GetStreamInfoRequest) returns (GetStreamInfoResponse) {}
  rpc BatchReadEvents(BatchReadEventsRequest) returns (stream BatchReadEventsResponse) {}
}

message ScalingPolicy {
  enum ScalingPolicyType {
    FIXED_NUM_SEGMENTS = 0;
    BY_RATE_IN_KBYTES_PER_SEC = 1;
    BY_RATE_IN_EVENTS_PER_SEC = 2;
  }
  ScalingPolicyType scaleType = 1;
  int32 target_rate = 2;
  int32 scale_factor = 3;
  int32 min_num_segments = 4;
}

message RetentionPolicy {
  enum RetentionPolicyType {
    // Set retention based on how long data has been in the stream in milliseconds.
    TIME = 0;
    // Set retention based on the total size of the data in the stream in bytes.
    SIZE = 1;
  }
  RetentionPolicyType retention_type = 1;
  int64 retention_param = 2;
}

message CreateScopeRequest {
  string scope = 1;
}

message CreateScopeResponse {
  bool created = 1;
}

message CreateStreamRequest {
  string scope = 1;
  string stream = 2;
  ScalingPolicy scaling_policy = 3;
  RetentionPolicy retention_policy = 4;
}

message CreateStreamResponse {
  bool created = 1;
}

message UpdateStreamRequest {
  string scope = 1;
  string stream = 2;
  ScalingPolicy scaling_policy = 3;
  RetentionPolicy retention_policy = 4;
}

message UpdateStreamResponse {
  bool updated = 1;
}

message TruncateStreamRequest {
  string scope = 1;
  string stream = 2;
  StreamCut stream_cut = 3;
}

message TruncateStreamResponse {
  bool truncated = 1;
}

message DeleteStreamRequest {
  string scope = 1;
  string stream = 2;
}

message DeleteStreamResponse {
}

message ListStreamsRequest {
  string scope = 1;
}

message ListStreamsResponse {
  string scope = 1;
  string stream = 2;
}

message ReadEventsRequest {
  string scope = 1;
  string stream = 2;
  int64 timeout_ms = 3;
  StreamCut from_stream_cut = 4;
  StreamCut to_stream_cut = 5;
}

message ReadEventsResponse {
  bytes event = 1;
  // Identifies the position of the reader AFTER reading this event.
  Position position = 2;
  // A pointer to this event.
  EventPointer event_pointer = 3;
  // Experimental use only: Identifies the event(s) immediately following this one.
  StreamCut stream_cut = 5;
}

// Identifies the position of a reader in zero or more streams and segments.
message Position {
  bytes bytes = 1;
  // For debug use only
  string description = 2;
}

// Identifies a single event.
message EventPointer {
  bytes bytes = 1;
  // For debug use only
  string description = 2;
}

// Identifies a "cut" in the entire keyspace of a single stream.
message StreamCut {
  // Empty string represents an unbounded stream cut.
  string text = 1;
  // For debug use only
  string description = 2;
  // For debug use only
  map<int64, int64> cut = 3;
}

message FetchEventRequest {
  string scope = 1;
  string stream = 2;
  EventPointer event_pointer = 3;
}

message FetchEventResponse {
  bytes event = 1;
}

message WriteEventsRequest {
  // The event to write. Events must be 8 MiB or less.
  bytes event = 1;
  // Optional.
  string routing_key = 2;
  // Must be set in the first request. For subsequent requests, must be the same value or the default (empty).
  string scope = 3;
  // Must be set in the first request. For subsequent requests, must be the same value or the default (empty).
  string stream = 4;
  // If true, all events will be written in a transaction and the transaction will be committed when the request
  // is completed.
  // If false, all events will be written without a transaction and the writer will be closed when the request
  // is completed.
  // Can be set in the first request. For subsequent requests, must be the same value or the default (false).
  bool use_transaction = 5;
  // If true, the open transaction will be flushed and committed after writing this event.
  // A new transaction will be opened.
  // This is ignored if use_transaction is false.
  bool commit = 6;
}

message WriteEventsResponse {
}

message GetStreamInfoRequest {
  string scope = 1;
  string stream = 2;
}

message GetStreamInfoResponse {
  // Beginning of stream
  StreamCut head_stream_cut = 1;
  // End of stream
  StreamCut tail_stream_cut = 2;
}

message BatchReadEventsRequest {
  string scope = 1;
  string stream = 2;
  StreamCut from_stream_cut = 3;
  StreamCut to_stream_cut = 4;
}

message BatchReadEventsResponse {
  bytes event = 1;
  int64 segment_id = 2;
  int64 offset = 3;
}
